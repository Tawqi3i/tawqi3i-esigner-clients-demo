@page "/sign/{SessionId}"

@inject ClientApiService ApiService

<PageTitle>Signing - Confirm</PageTitle>
<br />
<div class="d-flex justify-content-center w-100">

    <div class="alert alert-secondary" role="alert">
        <div class="d-flex flex-column align-items-center">
            <div class="m-2">SessionID: @SessionId</div>
            <br />
            <InputFile OnChange="LoadFiles" accept=".pdf" class="form-control form-control-sm m-2" />
            <br />
            <button class="btn btn-dark m-2" onclick="@SignHandler" disabled="@IsLoading">
                Generate Envelope
                @if (IsLoading)
                {
                    <div class="spinner-border spinner-border-sm text-light" role="status" />
                }
            </button>
            @if (!string.IsNullOrWhiteSpace(Result))
            {
                <p class="text-success m-2"><span>&#10003;</span> @Result</p>
            }
            @if (!string.IsNullOrWhiteSpace(Error))
            {
                <p class="text-danger m-2">@Error</p>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string? SessionId { get; set; }

    private bool IsLoading { get; set; }

    private string Error { get; set; }

    private string Result { get; set; }

    private IBrowserFile browserFile;

    private async void SignHandler()
    {
        if (browserFile == null)
        {
            return;
        }

        IsLoading = true;
        Error = string.Empty;
        Result = string.Empty;

        this.StateHasChanged();

        var ms = new MemoryStream();
        await browserFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).CopyToAsync(ms); // 10 MB limit
        ms.Position = 0; // Reset stream position to the beginning
        var b64 = Convert.ToBase64String(ms.ToArray());

        var resp = await this.ApiService.AdvancedSign(SessionId, b64);
        if (resp == null)
        {
            Error = "Something went wrong, try again!";
        }
        else
        {
            browserFile = null;
            Result = "EnvelopeId:" + resp.EnvelopeId;
        }

        IsLoading = false;

        this.StateHasChanged();
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        browserFile = e.File;
    }
}
